// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v2/models"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: d
func (_m *DBClient) AddDevice(d models.Device) (models.Device, errors.EdgeX) {
	ret := _m.Called(d)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(models.Device) models.Device); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(models.Device) errors.EdgeX); ok {
		r1 = rf(d)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddDeviceProfile provides a mock function with given fields: e
func (_m *DBClient) AddDeviceProfile(e models.DeviceProfile) (models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(e)

	var r0 models.DeviceProfile
	if rf, ok := ret.Get(0).(func(models.DeviceProfile) models.DeviceProfile); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(models.DeviceProfile) errors.EdgeX); ok {
		r1 = rf(e)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// AddDeviceService provides a mock function with given fields: e
func (_m *DBClient) AddDeviceService(e models.DeviceService) (models.DeviceService, errors.EdgeX) {
	ret := _m.Called(e)

	var r0 models.DeviceService
	if rf, ok := ret.Get(0).(func(models.DeviceService) models.DeviceService); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(models.DeviceService)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(models.DeviceService) errors.EdgeX); ok {
		r1 = rf(e)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// CloseSession provides a mock function with given fields:
func (_m *DBClient) CloseSession() {
	_m.Called()
}

// DeleteDeviceById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceById(id string) errors.EdgeX {
	ret := _m.Called(id)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceByName provides a mock function with given fields: name
func (_m *DBClient) DeleteDeviceByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceProfileById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceProfileById(id string) errors.EdgeX {
	ret := _m.Called(id)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceProfileByName provides a mock function with given fields: name
func (_m *DBClient) DeleteDeviceProfileByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceServiceById provides a mock function with given fields: id
func (_m *DBClient) DeleteDeviceServiceById(id string) errors.EdgeX {
	ret := _m.Called(id)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeleteDeviceServiceByName provides a mock function with given fields: name
func (_m *DBClient) DeleteDeviceServiceByName(name string) errors.EdgeX {
	ret := _m.Called(name)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) errors.EdgeX); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// DeviceProfileNameExists provides a mock function with given fields: name
func (_m *DBClient) DeviceProfileNameExists(name string) (bool, errors.EdgeX) {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceServiceNameExists provides a mock function with given fields: name
func (_m *DBClient) DeviceServiceNameExists(name string) (bool, errors.EdgeX) {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetDeviceProfileByName provides a mock function with given fields: name
func (_m *DBClient) GetDeviceProfileByName(name string) (models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(name)

	var r0 models.DeviceProfile
	if rf, ok := ret.Get(0).(func(string) models.DeviceProfile); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetDeviceProfiles provides a mock function with given fields: offset, limit, labels
func (_m *DBClient) GetDeviceProfiles(offset int, limit int, labels []string) ([]models.DeviceProfile, errors.EdgeX) {
	ret := _m.Called(offset, limit, labels)

	var r0 []models.DeviceProfile
	if rf, ok := ret.Get(0).(func(int, int, []string) []models.DeviceProfile); ok {
		r0 = rf(offset, limit, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceProfile)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int, []string) errors.EdgeX); ok {
		r1 = rf(offset, limit, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetDeviceServiceById provides a mock function with given fields: id
func (_m *DBClient) GetDeviceServiceById(id string) (models.DeviceService, errors.EdgeX) {
	ret := _m.Called(id)

	var r0 models.DeviceService
	if rf, ok := ret.Get(0).(func(string) models.DeviceService); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.DeviceService)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetDeviceServiceByName provides a mock function with given fields: name
func (_m *DBClient) GetDeviceServiceByName(name string) (models.DeviceService, errors.EdgeX) {
	ret := _m.Called(name)

	var r0 models.DeviceService
	if rf, ok := ret.Get(0).(func(string) models.DeviceService); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.DeviceService)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetDeviceServices provides a mock function with given fields: offset, limit, labels
func (_m *DBClient) GetDeviceServices(offset int, limit int, labels []string) ([]models.DeviceService, errors.EdgeX) {
	ret := _m.Called(offset, limit, labels)

	var r0 []models.DeviceService
	if rf, ok := ret.Get(0).(func(int, int, []string) []models.DeviceService); ok {
		r0 = rf(offset, limit, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceService)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(int, int, []string) errors.EdgeX); ok {
		r1 = rf(offset, limit, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UpdateDeviceProfile provides a mock function with given fields: e
func (_m *DBClient) UpdateDeviceProfile(e models.DeviceProfile) errors.EdgeX {
	ret := _m.Called(e)

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(models.DeviceProfile) errors.EdgeX); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}
